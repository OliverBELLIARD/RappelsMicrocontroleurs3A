
RappelsMicrocontroleurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027a4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800297c  0800297c  0000397c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029b0  080029b0  00004020  2**0
                  CONTENTS
  4 .ARM          00000008  080029b0  080029b0  000039b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029b8  080029b8  00004020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029b8  080029b8  000039b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080029bc  080029bc  000039bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  080029c0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000020  080029e0  00004020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080029e0  000040ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aba0  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001928  00000000  00000000  0000ebf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  00010518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000703  00000000  00000000  00010e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d120  00000000  00000000  00011553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b67b  00000000  00000000  0002e673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6709  00000000  00000000  00039cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f03f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002488  00000000  00000000  000f043c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000f28c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002964 	.word	0x08002964

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08002964 	.word	0x08002964

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050e:	4b1b      	ldr	r3, [pc, #108]	@ (800057c <MX_GPIO_Init+0x74>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000512:	4a1a      	ldr	r2, [pc, #104]	@ (800057c <MX_GPIO_Init+0x74>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800051a:	4b18      	ldr	r3, [pc, #96]	@ (800057c <MX_GPIO_Init+0x74>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000526:	4b15      	ldr	r3, [pc, #84]	@ (800057c <MX_GPIO_Init+0x74>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052a:	4a14      	ldr	r2, [pc, #80]	@ (800057c <MX_GPIO_Init+0x74>)
 800052c:	f043 0320 	orr.w	r3, r3, #32
 8000530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000532:	4b12      	ldr	r3, [pc, #72]	@ (800057c <MX_GPIO_Init+0x74>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000536:	f003 0320 	and.w	r3, r3, #32
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b0f      	ldr	r3, [pc, #60]	@ (800057c <MX_GPIO_Init+0x74>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000542:	4a0e      	ldr	r2, [pc, #56]	@ (800057c <MX_GPIO_Init+0x74>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800054a:	4b0c      	ldr	r3, [pc, #48]	@ (800057c <MX_GPIO_Init+0x74>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	4b09      	ldr	r3, [pc, #36]	@ (800057c <MX_GPIO_Init+0x74>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055a:	4a08      	ldr	r2, [pc, #32]	@ (800057c <MX_GPIO_Init+0x74>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000562:	4b06      	ldr	r3, [pc, #24]	@ (800057c <MX_GPIO_Init+0x74>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]

}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 facc 	bl	8000b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f836 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f7ff ffbc 	bl	8000508 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000590:	2000      	movs	r0, #0
 8000592:	f000 f90b 	bl	80007ac <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000596:	2101      	movs	r1, #1
 8000598:	2000      	movs	r0, #0
 800059a:	f000 f969 	bl	8000870 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800059e:	4b15      	ldr	r3, [pc, #84]	@ (80005f4 <main+0x74>)
 80005a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005a4:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80005a6:	4b13      	ldr	r3, [pc, #76]	@ (80005f4 <main+0x74>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80005ac:	4b11      	ldr	r3, [pc, #68]	@ (80005f4 <main+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80005b2:	4b10      	ldr	r3, [pc, #64]	@ (80005f4 <main+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80005b8:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <main+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80005be:	490d      	ldr	r1, [pc, #52]	@ (80005f4 <main+0x74>)
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 f9f7 	bl	80009b4 <BSP_COM_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <main+0x50>
  {
    Error_Handler();
 80005cc:	f000 f852 	bl	8000674 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (BSP_PB_GetState(BUTTON_USER)) {
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 f9bb 	bl	800094c <BSP_PB_GetState>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d003      	beq.n	80005e4 <main+0x64>
		BSP_LED_On(LED_GREEN);
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 f91b 	bl	8000818 <BSP_LED_On>
 80005e2:	e7f5      	b.n	80005d0 <main+0x50>
	  }
	  else {
		  BSP_LED_Toggle(LED_GREEN);
 80005e4:	2000      	movs	r0, #0
 80005e6:	f000 f92d 	bl	8000844 <BSP_LED_Toggle>
		  HAL_Delay(666);
 80005ea:	f240 209a 	movw	r0, #666	@ 0x29a
 80005ee:	f000 fb07 	bl	8000c00 <HAL_Delay>
	  if (BSP_PB_GetState(BUTTON_USER)) {
 80005f2:	e7ed      	b.n	80005d0 <main+0x50>
 80005f4:	2000003c 	.word	0x2000003c

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	@ 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0318 	add.w	r3, r7, #24
 8000602:	2238      	movs	r2, #56	@ 0x38
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f002 f97f 	bl	800290a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800061e:	f000 fe4d 	bl	80012bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000622:	2301      	movs	r3, #1
 8000624:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000626:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800062a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062c:	2300      	movs	r3, #0
 800062e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0318 	add.w	r3, r7, #24
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fef5 	bl	8001424 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x4c>
  {
    Error_Handler();
 8000640:	f000 f818 	bl	8000674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000648:	2302      	movs	r3, #2
 800064a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f001 f9f3 	bl	8001a48 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000668:	f000 f804 	bl	8000674 <Error_Handler>
  }
}
 800066c:	bf00      	nop
 800066e:	3750      	adds	r7, #80	@ 0x50
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
}
 800067a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <Error_Handler+0x8>

08000680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000686:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <HAL_MspInit+0x44>)
 8000688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800068a:	4a0e      	ldr	r2, [pc, #56]	@ (80006c4 <HAL_MspInit+0x44>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6613      	str	r3, [r2, #96]	@ 0x60
 8000692:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <HAL_MspInit+0x44>)
 8000694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <HAL_MspInit+0x44>)
 80006a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006a2:	4a08      	ldr	r2, [pc, #32]	@ (80006c4 <HAL_MspInit+0x44>)
 80006a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <HAL_MspInit+0x44>)
 80006ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80006b6:	f000 fea5 	bl	8001404 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40021000 	.word	0x40021000

080006c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <NMI_Handler+0x4>

080006d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <HardFault_Handler+0x4>

080006d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <MemManage_Handler+0x4>

080006e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <BusFault_Handler+0x4>

080006e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <UsageFault_Handler+0x4>

080006f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071e:	f000 fa51 	bl	8000bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}

08000726 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800072a:	2000      	movs	r0, #0
 800072c:	f000 f924 	bl	8000978 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}

08000734 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <SystemInit+0x20>)
 800073a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800073e:	4a05      	ldr	r2, [pc, #20]	@ (8000754 <SystemInit+0x20>)
 8000740:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000744:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000758:	480d      	ldr	r0, [pc, #52]	@ (8000790 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800075a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800075c:	f7ff ffea 	bl	8000734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000760:	480c      	ldr	r0, [pc, #48]	@ (8000794 <LoopForever+0x6>)
  ldr r1, =_edata
 8000762:	490d      	ldr	r1, [pc, #52]	@ (8000798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000764:	4a0d      	ldr	r2, [pc, #52]	@ (800079c <LoopForever+0xe>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000768:	e002      	b.n	8000770 <LoopCopyDataInit>

0800076a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800076c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076e:	3304      	adds	r3, #4

08000770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000774:	d3f9      	bcc.n	800076a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000776:	4a0a      	ldr	r2, [pc, #40]	@ (80007a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000778:	4c0a      	ldr	r4, [pc, #40]	@ (80007a4 <LoopForever+0x16>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800077c:	e001      	b.n	8000782 <LoopFillZerobss>

0800077e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000780:	3204      	adds	r2, #4

08000782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000784:	d3fb      	bcc.n	800077e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000786:	f002 f8c9 	bl	800291c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800078a:	f7ff fef9 	bl	8000580 <main>

0800078e <LoopForever>:

LoopForever:
    b LoopForever
 800078e:	e7fe      	b.n	800078e <LoopForever>
  ldr   r0, =_estack
 8000790:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000798:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800079c:	080029c0 	.word	0x080029c0
  ldr r2, =_sbss
 80007a0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80007a4:	200000ec 	.word	0x200000ec

080007a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007a8:	e7fe      	b.n	80007a8 <ADC1_2_IRQHandler>
	...

080007ac <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 80007b6:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <BSP_LED_Init+0x64>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	4a15      	ldr	r2, [pc, #84]	@ (8000810 <BSP_LED_Init+0x64>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c2:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <BSP_LED_Init+0x64>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80007ce:	2320      	movs	r3, #32
 80007d0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007da:	2303      	movs	r3, #3
 80007dc:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000814 <BSP_LED_Init+0x68>)
 80007e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e6:	f107 020c 	add.w	r2, r7, #12
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fb99 	bl	8000f24 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	4a07      	ldr	r2, [pc, #28]	@ (8000814 <BSP_LED_Init+0x68>)
 80007f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007fa:	2120      	movs	r1, #32
 80007fc:	2200      	movs	r2, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 fd2a 	bl	8001258 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3720      	adds	r7, #32
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000
 8000814:	20000004 	.word	0x20000004

08000818 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	4a06      	ldr	r2, [pc, #24]	@ (8000840 <BSP_LED_On+0x28>)
 8000826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082a:	2120      	movs	r1, #32
 800082c:	2201      	movs	r2, #1
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fd12 	bl	8001258 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000004 	.word	0x20000004

08000844 <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	4a06      	ldr	r2, [pc, #24]	@ (800086c <BSP_LED_Toggle+0x28>)
 8000852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000856:	2220      	movs	r2, #32
 8000858:	4611      	mov	r1, r2
 800085a:	4618      	mov	r0, r3
 800085c:	f000 fd14 	bl	8001288 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000004 	.word	0x20000004

08000870 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	460a      	mov	r2, r1
 800087a:	71fb      	strb	r3, [r7, #7]
 800087c:	4613      	mov	r3, r2
 800087e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000880:	4b2c      	ldr	r3, [pc, #176]	@ (8000934 <BSP_PB_Init+0xc4>)
 8000882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000884:	4a2b      	ldr	r2, [pc, #172]	@ (8000934 <BSP_PB_Init+0xc4>)
 8000886:	f043 0304 	orr.w	r3, r3, #4
 800088a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088c:	4b29      	ldr	r3, [pc, #164]	@ (8000934 <BSP_PB_Init+0xc4>)
 800088e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000890:	f003 0304 	and.w	r3, r3, #4
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000898:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800089e:	2302      	movs	r3, #2
 80008a0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a2:	2302      	movs	r3, #2
 80008a4:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80008a6:	79bb      	ldrb	r3, [r7, #6]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d10c      	bne.n	80008c6 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4a21      	ldr	r2, [pc, #132]	@ (8000938 <BSP_PB_Init+0xc8>)
 80008b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b8:	f107 020c 	add.w	r2, r7, #12
 80008bc:	4611      	mov	r1, r2
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 fb30 	bl	8000f24 <HAL_GPIO_Init>
 80008c4:	e031      	b.n	800092a <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80008c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ca:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	4a1a      	ldr	r2, [pc, #104]	@ (8000938 <BSP_PB_Init+0xc8>)
 80008d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d4:	f107 020c 	add.w	r2, r7, #12
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 fb22 	bl	8000f24 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	4a15      	ldr	r2, [pc, #84]	@ (800093c <BSP_PB_Init+0xcc>)
 80008e6:	441a      	add	r2, r3
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	4915      	ldr	r1, [pc, #84]	@ (8000940 <BSP_PB_Init+0xd0>)
 80008ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008f0:	4619      	mov	r1, r3
 80008f2:	4610      	mov	r0, r2
 80008f4:	f000 fad2 	bl	8000e9c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	4a0f      	ldr	r2, [pc, #60]	@ (800093c <BSP_PB_Init+0xcc>)
 80008fe:	1898      	adds	r0, r3, r2
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	4a10      	ldr	r2, [pc, #64]	@ (8000944 <BSP_PB_Init+0xd4>)
 8000904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000908:	461a      	mov	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f000 faa9 	bl	8000e62 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000910:	2028      	movs	r0, #40	@ 0x28
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	4a0c      	ldr	r2, [pc, #48]	@ (8000948 <BSP_PB_Init+0xd8>)
 8000916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091a:	2200      	movs	r2, #0
 800091c:	4619      	mov	r1, r3
 800091e:	f000 fa6c 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000922:	2328      	movs	r3, #40	@ 0x28
 8000924:	4618      	mov	r0, r3
 8000926:	f000 fa82 	bl	8000e2e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800092a:	2300      	movs	r3, #0
}
 800092c:	4618      	mov	r0, r3
 800092e:	3720      	adds	r7, #32
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40021000 	.word	0x40021000
 8000938:	20000008 	.word	0x20000008
 800093c:	2000004c 	.word	0x2000004c
 8000940:	08002994 	.word	0x08002994
 8000944:	20000010 	.word	0x20000010
 8000948:	20000014 	.word	0x20000014

0800094c <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	4a06      	ldr	r2, [pc, #24]	@ (8000974 <BSP_PB_GetState+0x28>)
 800095a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f000 fc5f 	bl	8001228 <HAL_GPIO_ReadPin>
 800096a:	4603      	mov	r3, r0
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000008 	.word	0x20000008

08000978 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	4a04      	ldr	r2, [pc, #16]	@ (8000998 <BSP_PB_IRQHandler+0x20>)
 8000988:	4413      	add	r3, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fa9a 	bl	8000ec4 <HAL_EXTI_IRQHandler>
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000004c 	.word	0x2000004c

0800099c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d903      	bls.n	80009d2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80009ca:	f06f 0301 	mvn.w	r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	e018      	b.n	8000a04 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2294      	movs	r2, #148	@ 0x94
 80009d6:	fb02 f303 	mul.w	r3, r2, r3
 80009da:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <BSP_COM_Init+0x5c>)
 80009dc:	4413      	add	r3, r2
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f852 	bl	8000a88 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	2294      	movs	r2, #148	@ 0x94
 80009e8:	fb02 f303 	mul.w	r3, r2, r3
 80009ec:	4a08      	ldr	r2, [pc, #32]	@ (8000a10 <BSP_COM_Init+0x5c>)
 80009ee:	4413      	add	r3, r2
 80009f0:	6839      	ldr	r1, [r7, #0]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f80e 	bl	8000a14 <MX_LPUART1_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d002      	beq.n	8000a04 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80009fe:	f06f 0303 	mvn.w	r3, #3
 8000a02:	e000      	b.n	8000a06 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000a04:	68fb      	ldr	r3, [r7, #12]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000054 	.word	0x20000054

08000a14 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <MX_LPUART1_Init+0x60>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	220c      	movs	r2, #12
 8000a32:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	895b      	ldrh	r3, [r3, #10]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685a      	ldr	r2, [r3, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	891b      	ldrh	r3, [r3, #8]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	899b      	ldrh	r3, [r3, #12]
 8000a54:	461a      	mov	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a60:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f001 fa0c 	bl	8001e80 <HAL_UART_Init>
 8000a68:	4603      	mov	r3, r0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000000c 	.word	0x2000000c

08000a78 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f7ff ff8d 	bl	800099c <BSP_PB_Callback>
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	@ 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000a90:	4b22      	ldr	r3, [pc, #136]	@ (8000b1c <COM1_MspInit+0x94>)
 8000a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a94:	4a21      	ldr	r2, [pc, #132]	@ (8000b1c <COM1_MspInit+0x94>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b1c <COM1_MspInit+0x94>)
 8000a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b1c <COM1_MspInit+0x94>)
 8000aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aac:	4a1b      	ldr	r2, [pc, #108]	@ (8000b1c <COM1_MspInit+0x94>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab4:	4b19      	ldr	r3, [pc, #100]	@ (8000b1c <COM1_MspInit+0x94>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000ac0:	4b16      	ldr	r3, [pc, #88]	@ (8000b1c <COM1_MspInit+0x94>)
 8000ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ac4:	4a15      	ldr	r2, [pc, #84]	@ (8000b1c <COM1_MspInit+0x94>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000acc:	4b13      	ldr	r3, [pc, #76]	@ (8000b1c <COM1_MspInit+0x94>)
 8000ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000ae8:	230c      	movs	r3, #12
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af6:	f000 fa15 	bl	8000f24 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000afa:	2308      	movs	r3, #8
 8000afc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000b02:	230c      	movs	r3, #12
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b10:	f000 fa08 	bl	8000f24 <HAL_GPIO_Init>
}
 8000b14:	bf00      	nop
 8000b16:	3728      	adds	r7, #40	@ 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2a:	2003      	movs	r0, #3
 8000b2c:	f000 f95a 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b30:	2000      	movs	r0, #0
 8000b32:	f000 f80d 	bl	8000b50 <HAL_InitTick>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d002      	beq.n	8000b42 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	71fb      	strb	r3, [r7, #7]
 8000b40:	e001      	b.n	8000b46 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b42:	f7ff fd9d 	bl	8000680 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b46:	79fb      	ldrb	r3, [r7, #7]

}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b5c:	4b16      	ldr	r3, [pc, #88]	@ (8000bb8 <HAL_InitTick+0x68>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d022      	beq.n	8000baa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b64:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <HAL_InitTick+0x6c>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <HAL_InitTick+0x68>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b70:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f966 	bl	8000e4a <HAL_SYSTICK_Config>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d10f      	bne.n	8000ba4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b0f      	cmp	r3, #15
 8000b88:	d809      	bhi.n	8000b9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b92:	f000 f932 	bl	8000dfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <HAL_InitTick+0x70>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	e007      	b.n	8000bae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	73fb      	strb	r3, [r7, #15]
 8000ba2:	e004      	b.n	8000bae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	e001      	b.n	8000bae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2000001c 	.word	0x2000001c
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000018 	.word	0x20000018

08000bc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc8:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <HAL_IncTick+0x1c>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b05      	ldr	r3, [pc, #20]	@ (8000be4 <HAL_IncTick+0x20>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a03      	ldr	r2, [pc, #12]	@ (8000be0 <HAL_IncTick+0x1c>)
 8000bd4:	6013      	str	r3, [r2, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	200000e8 	.word	0x200000e8
 8000be4:	2000001c 	.word	0x2000001c

08000be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return uwTick;
 8000bec:	4b03      	ldr	r3, [pc, #12]	@ (8000bfc <HAL_GetTick+0x14>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	200000e8 	.word	0x200000e8

08000c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c08:	f7ff ffee 	bl	8000be8 <HAL_GetTick>
 8000c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c18:	d004      	beq.n	8000c24 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1a:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <HAL_Delay+0x40>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	4413      	add	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c24:	bf00      	nop
 8000c26:	f7ff ffdf 	bl	8000be8 <HAL_GetTick>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d8f7      	bhi.n	8000c26 <HAL_Delay+0x26>
  {
  }
}
 8000c36:	bf00      	nop
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000001c 	.word	0x2000001c

08000c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	@ (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db0b      	blt.n	8000cd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f003 021f 	and.w	r2, r3, #31
 8000cc0:	4907      	ldr	r1, [pc, #28]	@ (8000ce0 <__NVIC_EnableIRQ+0x38>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	095b      	lsrs	r3, r3, #5
 8000cc8:	2001      	movs	r0, #1
 8000cca:	fa00 f202 	lsl.w	r2, r0, r2
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000e100 	.word	0xe000e100

08000ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	db0a      	blt.n	8000d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	490c      	ldr	r1, [pc, #48]	@ (8000d30 <__NVIC_SetPriority+0x4c>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	0112      	lsls	r2, r2, #4
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	440b      	add	r3, r1
 8000d08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d0c:	e00a      	b.n	8000d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4908      	ldr	r1, [pc, #32]	@ (8000d34 <__NVIC_SetPriority+0x50>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	3b04      	subs	r3, #4
 8000d1c:	0112      	lsls	r2, r2, #4
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	440b      	add	r3, r1
 8000d22:	761a      	strb	r2, [r3, #24]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000e100 	.word	0xe000e100
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	@ 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f1c3 0307 	rsb	r3, r3, #7
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	bf28      	it	cs
 8000d56:	2304      	movcs	r3, #4
 8000d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d902      	bls.n	8000d68 <NVIC_EncodePriority+0x30>
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3b03      	subs	r3, #3
 8000d66:	e000      	b.n	8000d6a <NVIC_EncodePriority+0x32>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43da      	mvns	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43d9      	mvns	r1, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	4313      	orrs	r3, r2
         );
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3724      	adds	r7, #36	@ 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000db0:	d301      	bcc.n	8000db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00f      	b.n	8000dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db6:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <SysTick_Config+0x40>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dc4:	f7ff ff8e 	bl	8000ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <SysTick_Config+0x40>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <SysTick_Config+0x40>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ff29 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e08:	f7ff ff40 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000e0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	68b9      	ldr	r1, [r7, #8]
 8000e12:	6978      	ldr	r0, [r7, #20]
 8000e14:	f7ff ff90 	bl	8000d38 <NVIC_EncodePriority>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff5f 	bl	8000ce4 <__NVIC_SetPriority>
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff33 	bl	8000ca8 <__NVIC_EnableIRQ>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ffa4 	bl	8000da0 <SysTick_Config>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8000e62:	b480      	push	{r7}
 8000e64:	b087      	sub	sp, #28
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	60f8      	str	r0, [r7, #12]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8000e70:	2300      	movs	r3, #0
 8000e72:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8000e74:	7afb      	ldrb	r3, [r7, #11]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d103      	bne.n	8000e82 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	605a      	str	r2, [r3, #4]
      break;
 8000e80:	e005      	b.n	8000e8e <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8000e8c:	bf00      	nop
  }

  return status;
 8000e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	371c      	adds	r7, #28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d101      	bne.n	8000eb0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e003      	b.n	8000eb8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
  }
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	0c1b      	lsrs	r3, r3, #16
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 031f 	and.w	r3, r3, #31
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	015a      	lsls	r2, r3, #5
 8000eec:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <HAL_EXTI_IRQHandler+0x5c>)
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d009      	beq.n	8000f16 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d002      	beq.n	8000f16 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	4798      	blx	r3
    }
  }
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40010414 	.word	0x40010414

08000f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b087      	sub	sp, #28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f32:	e15a      	b.n	80011ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	2101      	movs	r1, #1
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f40:	4013      	ands	r3, r2
 8000f42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f000 814c 	beq.w	80011e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d005      	beq.n	8000f64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d130      	bne.n	8000fc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	091b      	lsrs	r3, r3, #4
 8000fb0:	f003 0201 	and.w	r2, r3, #1
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d017      	beq.n	8001002 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	2203      	movs	r2, #3
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d123      	bne.n	8001056 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	08da      	lsrs	r2, r3, #3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3208      	adds	r2, #8
 8001016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	220f      	movs	r2, #15
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	691a      	ldr	r2, [r3, #16]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	08da      	lsrs	r2, r3, #3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3208      	adds	r2, #8
 8001050:	6939      	ldr	r1, [r7, #16]
 8001052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 0203 	and.w	r2, r3, #3
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001092:	2b00      	cmp	r3, #0
 8001094:	f000 80a6 	beq.w	80011e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001098:	4b5b      	ldr	r3, [pc, #364]	@ (8001208 <HAL_GPIO_Init+0x2e4>)
 800109a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800109c:	4a5a      	ldr	r2, [pc, #360]	@ (8001208 <HAL_GPIO_Init+0x2e4>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80010a4:	4b58      	ldr	r3, [pc, #352]	@ (8001208 <HAL_GPIO_Init+0x2e4>)
 80010a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b0:	4a56      	ldr	r2, [pc, #344]	@ (800120c <HAL_GPIO_Init+0x2e8>)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	3302      	adds	r3, #2
 80010b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	220f      	movs	r2, #15
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010da:	d01f      	beq.n	800111c <HAL_GPIO_Init+0x1f8>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a4c      	ldr	r2, [pc, #304]	@ (8001210 <HAL_GPIO_Init+0x2ec>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d019      	beq.n	8001118 <HAL_GPIO_Init+0x1f4>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a4b      	ldr	r2, [pc, #300]	@ (8001214 <HAL_GPIO_Init+0x2f0>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d013      	beq.n	8001114 <HAL_GPIO_Init+0x1f0>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a4a      	ldr	r2, [pc, #296]	@ (8001218 <HAL_GPIO_Init+0x2f4>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d00d      	beq.n	8001110 <HAL_GPIO_Init+0x1ec>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a49      	ldr	r2, [pc, #292]	@ (800121c <HAL_GPIO_Init+0x2f8>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d007      	beq.n	800110c <HAL_GPIO_Init+0x1e8>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a48      	ldr	r2, [pc, #288]	@ (8001220 <HAL_GPIO_Init+0x2fc>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d101      	bne.n	8001108 <HAL_GPIO_Init+0x1e4>
 8001104:	2305      	movs	r3, #5
 8001106:	e00a      	b.n	800111e <HAL_GPIO_Init+0x1fa>
 8001108:	2306      	movs	r3, #6
 800110a:	e008      	b.n	800111e <HAL_GPIO_Init+0x1fa>
 800110c:	2304      	movs	r3, #4
 800110e:	e006      	b.n	800111e <HAL_GPIO_Init+0x1fa>
 8001110:	2303      	movs	r3, #3
 8001112:	e004      	b.n	800111e <HAL_GPIO_Init+0x1fa>
 8001114:	2302      	movs	r3, #2
 8001116:	e002      	b.n	800111e <HAL_GPIO_Init+0x1fa>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <HAL_GPIO_Init+0x1fa>
 800111c:	2300      	movs	r3, #0
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	f002 0203 	and.w	r2, r2, #3
 8001124:	0092      	lsls	r2, r2, #2
 8001126:	4093      	lsls	r3, r2
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800112e:	4937      	ldr	r1, [pc, #220]	@ (800120c <HAL_GPIO_Init+0x2e8>)
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	3302      	adds	r3, #2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800113c:	4b39      	ldr	r3, [pc, #228]	@ (8001224 <HAL_GPIO_Init+0x300>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	43db      	mvns	r3, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001160:	4a30      	ldr	r2, [pc, #192]	@ (8001224 <HAL_GPIO_Init+0x300>)
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001166:	4b2f      	ldr	r3, [pc, #188]	@ (8001224 <HAL_GPIO_Init+0x300>)
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	43db      	mvns	r3, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800118a:	4a26      	ldr	r2, [pc, #152]	@ (8001224 <HAL_GPIO_Init+0x300>)
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001190:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <HAL_GPIO_Init+0x300>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001224 <HAL_GPIO_Init+0x300>)
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <HAL_GPIO_Init+0x300>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011de:	4a11      	ldr	r2, [pc, #68]	@ (8001224 <HAL_GPIO_Init+0x300>)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	3301      	adds	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	fa22 f303 	lsr.w	r3, r2, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f47f ae9d 	bne.w	8000f34 <HAL_GPIO_Init+0x10>
  }
}
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
 80011fe:	371c      	adds	r7, #28
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	40021000 	.word	0x40021000
 800120c:	40010000 	.word	0x40010000
 8001210:	48000400 	.word	0x48000400
 8001214:	48000800 	.word	0x48000800
 8001218:	48000c00 	.word	0x48000c00
 800121c:	48001000 	.word	0x48001000
 8001220:	48001400 	.word	0x48001400
 8001224:	40010400 	.word	0x40010400

08001228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	887b      	ldrh	r3, [r7, #2]
 800123a:	4013      	ands	r3, r2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001240:	2301      	movs	r3, #1
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	e001      	b.n	800124a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800124a:	7bfb      	ldrb	r3, [r7, #15]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
 8001264:	4613      	mov	r3, r2
 8001266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001268:	787b      	ldrb	r3, [r7, #1]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001274:	e002      	b.n	800127c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4013      	ands	r3, r2
 80012a0:	041a      	lsls	r2, r3, #16
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43d9      	mvns	r1, r3
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	400b      	ands	r3, r1
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	619a      	str	r2, [r3, #24]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d141      	bne.n	800134e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ca:	4b4b      	ldr	r3, [pc, #300]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012d6:	d131      	bne.n	800133c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012d8:	4b47      	ldr	r3, [pc, #284]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012de:	4a46      	ldr	r2, [pc, #280]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e8:	4b43      	ldr	r3, [pc, #268]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012f0:	4a41      	ldr	r2, [pc, #260]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012f8:	4b40      	ldr	r3, [pc, #256]	@ (80013fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2232      	movs	r2, #50	@ 0x32
 80012fe:	fb02 f303 	mul.w	r3, r2, r3
 8001302:	4a3f      	ldr	r2, [pc, #252]	@ (8001400 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001304:	fba2 2303 	umull	r2, r3, r2, r3
 8001308:	0c9b      	lsrs	r3, r3, #18
 800130a:	3301      	adds	r3, #1
 800130c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800130e:	e002      	b.n	8001316 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	3b01      	subs	r3, #1
 8001314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001316:	4b38      	ldr	r3, [pc, #224]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800131e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001322:	d102      	bne.n	800132a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f2      	bne.n	8001310 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800132a:	4b33      	ldr	r3, [pc, #204]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001336:	d158      	bne.n	80013ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e057      	b.n	80013ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800133c:	4b2e      	ldr	r3, [pc, #184]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800133e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001342:	4a2d      	ldr	r2, [pc, #180]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001344:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001348:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800134c:	e04d      	b.n	80013ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001354:	d141      	bne.n	80013da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001356:	4b28      	ldr	r3, [pc, #160]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800135e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001362:	d131      	bne.n	80013c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001364:	4b24      	ldr	r3, [pc, #144]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800136a:	4a23      	ldr	r2, [pc, #140]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001370:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001374:	4b20      	ldr	r3, [pc, #128]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800137c:	4a1e      	ldr	r2, [pc, #120]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001382:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001384:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2232      	movs	r2, #50	@ 0x32
 800138a:	fb02 f303 	mul.w	r3, r2, r3
 800138e:	4a1c      	ldr	r2, [pc, #112]	@ (8001400 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	0c9b      	lsrs	r3, r3, #18
 8001396:	3301      	adds	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800139a:	e002      	b.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3b01      	subs	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013a2:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013ae:	d102      	bne.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f2      	bne.n	800139c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013c2:	d112      	bne.n	80013ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e011      	b.n	80013ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013c8:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013ce:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013d8:	e007      	b.n	80013ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013da:	4b07      	ldr	r3, [pc, #28]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013e2:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	40007000 	.word	0x40007000
 80013fc:	20000000 	.word	0x20000000
 8001400:	431bde83 	.word	0x431bde83

08001404 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001408:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	4a04      	ldr	r2, [pc, #16]	@ (8001420 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800140e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001412:	6093      	str	r3, [r2, #8]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40007000 	.word	0x40007000

08001424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e2fe      	b.n	8001a34 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d075      	beq.n	800152e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001442:	4b97      	ldr	r3, [pc, #604]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800144c:	4b94      	ldr	r3, [pc, #592]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	2b0c      	cmp	r3, #12
 800145a:	d102      	bne.n	8001462 <HAL_RCC_OscConfig+0x3e>
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	2b03      	cmp	r3, #3
 8001460:	d002      	beq.n	8001468 <HAL_RCC_OscConfig+0x44>
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2b08      	cmp	r3, #8
 8001466:	d10b      	bne.n	8001480 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001468:	4b8d      	ldr	r3, [pc, #564]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d05b      	beq.n	800152c <HAL_RCC_OscConfig+0x108>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d157      	bne.n	800152c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e2d9      	b.n	8001a34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001488:	d106      	bne.n	8001498 <HAL_RCC_OscConfig+0x74>
 800148a:	4b85      	ldr	r3, [pc, #532]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a84      	ldr	r2, [pc, #528]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 8001490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e01d      	b.n	80014d4 <HAL_RCC_OscConfig+0xb0>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0x98>
 80014a2:	4b7f      	ldr	r3, [pc, #508]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a7e      	ldr	r2, [pc, #504]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 80014a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b7c      	ldr	r3, [pc, #496]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a7b      	ldr	r2, [pc, #492]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	e00b      	b.n	80014d4 <HAL_RCC_OscConfig+0xb0>
 80014bc:	4b78      	ldr	r3, [pc, #480]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a77      	ldr	r2, [pc, #476]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 80014c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b75      	ldr	r3, [pc, #468]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a74      	ldr	r2, [pc, #464]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 80014ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d013      	beq.n	8001504 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014dc:	f7ff fb84 	bl	8000be8 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff fb80 	bl	8000be8 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	@ 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e29e      	b.n	8001a34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f6:	4b6a      	ldr	r3, [pc, #424]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0xc0>
 8001502:	e014      	b.n	800152e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001504:	f7ff fb70 	bl	8000be8 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff fb6c 	bl	8000be8 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	@ 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e28a      	b.n	8001a34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800151e:	4b60      	ldr	r3, [pc, #384]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0xe8>
 800152a:	e000      	b.n	800152e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d075      	beq.n	8001626 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800153a:	4b59      	ldr	r3, [pc, #356]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001544:	4b56      	ldr	r3, [pc, #344]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2b0c      	cmp	r3, #12
 8001552:	d102      	bne.n	800155a <HAL_RCC_OscConfig+0x136>
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d002      	beq.n	8001560 <HAL_RCC_OscConfig+0x13c>
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	2b04      	cmp	r3, #4
 800155e:	d11f      	bne.n	80015a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001560:	4b4f      	ldr	r3, [pc, #316]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001568:	2b00      	cmp	r3, #0
 800156a:	d005      	beq.n	8001578 <HAL_RCC_OscConfig+0x154>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e25d      	b.n	8001a34 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001578:	4b49      	ldr	r3, [pc, #292]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	061b      	lsls	r3, r3, #24
 8001586:	4946      	ldr	r1, [pc, #280]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800158c:	4b45      	ldr	r3, [pc, #276]	@ (80016a4 <HAL_RCC_OscConfig+0x280>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fadd 	bl	8000b50 <HAL_InitTick>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d043      	beq.n	8001624 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e249      	b.n	8001a34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d023      	beq.n	80015f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a8:	4b3d      	ldr	r3, [pc, #244]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a3c      	ldr	r2, [pc, #240]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 80015ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff fb18 	bl	8000be8 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015bc:	f7ff fb14 	bl	8000be8 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e232      	b.n	8001a34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ce:	4b34      	ldr	r3, [pc, #208]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0f0      	beq.n	80015bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015da:	4b31      	ldr	r3, [pc, #196]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	061b      	lsls	r3, r3, #24
 80015e8:	492d      	ldr	r1, [pc, #180]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	604b      	str	r3, [r1, #4]
 80015ee:	e01a      	b.n	8001626 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f0:	4b2b      	ldr	r3, [pc, #172]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a2a      	ldr	r2, [pc, #168]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 80015f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff faf4 	bl	8000be8 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001604:	f7ff faf0 	bl	8000be8 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e20e      	b.n	8001a34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001616:	4b22      	ldr	r3, [pc, #136]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x1e0>
 8001622:	e000      	b.n	8001626 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001624:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b00      	cmp	r3, #0
 8001630:	d041      	beq.n	80016b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d01c      	beq.n	8001674 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800163a:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 800163c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001640:	4a17      	ldr	r2, [pc, #92]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164a:	f7ff facd 	bl	8000be8 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001652:	f7ff fac9 	bl	8000be8 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e1e7      	b.n	8001a34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001664:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 8001666:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0ef      	beq.n	8001652 <HAL_RCC_OscConfig+0x22e>
 8001672:	e020      	b.n	80016b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001674:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 8001676:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800167a:	4a09      	ldr	r2, [pc, #36]	@ (80016a0 <HAL_RCC_OscConfig+0x27c>)
 800167c:	f023 0301 	bic.w	r3, r3, #1
 8001680:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001684:	f7ff fab0 	bl	8000be8 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800168a:	e00d      	b.n	80016a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168c:	f7ff faac 	bl	8000be8 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d906      	bls.n	80016a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e1ca      	b.n	8001a34 <HAL_RCC_OscConfig+0x610>
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000
 80016a4:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016a8:	4b8c      	ldr	r3, [pc, #560]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 80016aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1ea      	bne.n	800168c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 80a6 	beq.w	8001810 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c4:	2300      	movs	r3, #0
 80016c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016c8:	4b84      	ldr	r3, [pc, #528]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_OscConfig+0x2b4>
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <HAL_RCC_OscConfig+0x2b6>
 80016d8:	2300      	movs	r3, #0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00d      	beq.n	80016fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	4b7f      	ldr	r3, [pc, #508]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e2:	4a7e      	ldr	r2, [pc, #504]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ea:	4b7c      	ldr	r3, [pc, #496]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 80016ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016f6:	2301      	movs	r3, #1
 80016f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016fa:	4b79      	ldr	r3, [pc, #484]	@ (80018e0 <HAL_RCC_OscConfig+0x4bc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d118      	bne.n	8001738 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001706:	4b76      	ldr	r3, [pc, #472]	@ (80018e0 <HAL_RCC_OscConfig+0x4bc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a75      	ldr	r2, [pc, #468]	@ (80018e0 <HAL_RCC_OscConfig+0x4bc>)
 800170c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001712:	f7ff fa69 	bl	8000be8 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171a:	f7ff fa65 	bl	8000be8 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e183      	b.n	8001a34 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800172c:	4b6c      	ldr	r3, [pc, #432]	@ (80018e0 <HAL_RCC_OscConfig+0x4bc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d108      	bne.n	8001752 <HAL_RCC_OscConfig+0x32e>
 8001740:	4b66      	ldr	r3, [pc, #408]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 8001742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001746:	4a65      	ldr	r2, [pc, #404]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001750:	e024      	b.n	800179c <HAL_RCC_OscConfig+0x378>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b05      	cmp	r3, #5
 8001758:	d110      	bne.n	800177c <HAL_RCC_OscConfig+0x358>
 800175a:	4b60      	ldr	r3, [pc, #384]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 800175c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001760:	4a5e      	ldr	r2, [pc, #376]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800176a:	4b5c      	ldr	r3, [pc, #368]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 800176c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001770:	4a5a      	ldr	r2, [pc, #360]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800177a:	e00f      	b.n	800179c <HAL_RCC_OscConfig+0x378>
 800177c:	4b57      	ldr	r3, [pc, #348]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001782:	4a56      	ldr	r2, [pc, #344]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800178c:	4b53      	ldr	r3, [pc, #332]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 800178e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001792:	4a52      	ldr	r2, [pc, #328]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 8001794:	f023 0304 	bic.w	r3, r3, #4
 8001798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d016      	beq.n	80017d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a4:	f7ff fa20 	bl	8000be8 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017aa:	e00a      	b.n	80017c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ac:	f7ff fa1c 	bl	8000be8 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e138      	b.n	8001a34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017c2:	4b46      	ldr	r3, [pc, #280]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 80017c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0ed      	beq.n	80017ac <HAL_RCC_OscConfig+0x388>
 80017d0:	e015      	b.n	80017fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d2:	f7ff fa09 	bl	8000be8 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017d8:	e00a      	b.n	80017f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017da:	f7ff fa05 	bl	8000be8 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e121      	b.n	8001a34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017f0:	4b3a      	ldr	r3, [pc, #232]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 80017f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1ed      	bne.n	80017da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017fe:	7ffb      	ldrb	r3, [r7, #31]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d105      	bne.n	8001810 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001804:	4b35      	ldr	r3, [pc, #212]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 8001806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001808:	4a34      	ldr	r2, [pc, #208]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 800180a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800180e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0320 	and.w	r3, r3, #32
 8001818:	2b00      	cmp	r3, #0
 800181a:	d03c      	beq.n	8001896 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d01c      	beq.n	800185e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001824:	4b2d      	ldr	r3, [pc, #180]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 8001826:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800182a:	4a2c      	ldr	r2, [pc, #176]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001834:	f7ff f9d8 	bl	8000be8 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800183c:	f7ff f9d4 	bl	8000be8 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e0f2      	b.n	8001a34 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800184e:	4b23      	ldr	r3, [pc, #140]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 8001850:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0ef      	beq.n	800183c <HAL_RCC_OscConfig+0x418>
 800185c:	e01b      	b.n	8001896 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800185e:	4b1f      	ldr	r3, [pc, #124]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 8001860:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001864:	4a1d      	ldr	r2, [pc, #116]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186e:	f7ff f9bb 	bl	8000be8 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001876:	f7ff f9b7 	bl	8000be8 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e0d5      	b.n	8001a34 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001888:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 800188a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1ef      	bne.n	8001876 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 80c9 	beq.w	8001a32 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018a0:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 030c 	and.w	r3, r3, #12
 80018a8:	2b0c      	cmp	r3, #12
 80018aa:	f000 8083 	beq.w	80019b4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d15e      	bne.n	8001974 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b6:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a08      	ldr	r2, [pc, #32]	@ (80018dc <HAL_RCC_OscConfig+0x4b8>)
 80018bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c2:	f7ff f991 	bl	8000be8 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c8:	e00c      	b.n	80018e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ca:	f7ff f98d 	bl	8000be8 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d905      	bls.n	80018e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e0ab      	b.n	8001a34 <HAL_RCC_OscConfig+0x610>
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e4:	4b55      	ldr	r3, [pc, #340]	@ (8001a3c <HAL_RCC_OscConfig+0x618>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1ec      	bne.n	80018ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f0:	4b52      	ldr	r3, [pc, #328]	@ (8001a3c <HAL_RCC_OscConfig+0x618>)
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	4b52      	ldr	r3, [pc, #328]	@ (8001a40 <HAL_RCC_OscConfig+0x61c>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6a11      	ldr	r1, [r2, #32]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001900:	3a01      	subs	r2, #1
 8001902:	0112      	lsls	r2, r2, #4
 8001904:	4311      	orrs	r1, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800190a:	0212      	lsls	r2, r2, #8
 800190c:	4311      	orrs	r1, r2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001912:	0852      	lsrs	r2, r2, #1
 8001914:	3a01      	subs	r2, #1
 8001916:	0552      	lsls	r2, r2, #21
 8001918:	4311      	orrs	r1, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800191e:	0852      	lsrs	r2, r2, #1
 8001920:	3a01      	subs	r2, #1
 8001922:	0652      	lsls	r2, r2, #25
 8001924:	4311      	orrs	r1, r2
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800192a:	06d2      	lsls	r2, r2, #27
 800192c:	430a      	orrs	r2, r1
 800192e:	4943      	ldr	r1, [pc, #268]	@ (8001a3c <HAL_RCC_OscConfig+0x618>)
 8001930:	4313      	orrs	r3, r2
 8001932:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001934:	4b41      	ldr	r3, [pc, #260]	@ (8001a3c <HAL_RCC_OscConfig+0x618>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a40      	ldr	r2, [pc, #256]	@ (8001a3c <HAL_RCC_OscConfig+0x618>)
 800193a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800193e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001940:	4b3e      	ldr	r3, [pc, #248]	@ (8001a3c <HAL_RCC_OscConfig+0x618>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	4a3d      	ldr	r2, [pc, #244]	@ (8001a3c <HAL_RCC_OscConfig+0x618>)
 8001946:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800194a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff f94c 	bl	8000be8 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001954:	f7ff f948 	bl	8000be8 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e066      	b.n	8001a34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001966:	4b35      	ldr	r3, [pc, #212]	@ (8001a3c <HAL_RCC_OscConfig+0x618>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x530>
 8001972:	e05e      	b.n	8001a32 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001974:	4b31      	ldr	r3, [pc, #196]	@ (8001a3c <HAL_RCC_OscConfig+0x618>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a30      	ldr	r2, [pc, #192]	@ (8001a3c <HAL_RCC_OscConfig+0x618>)
 800197a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800197e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff f932 	bl	8000be8 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001988:	f7ff f92e 	bl	8000be8 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e04c      	b.n	8001a34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800199a:	4b28      	ldr	r3, [pc, #160]	@ (8001a3c <HAL_RCC_OscConfig+0x618>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80019a6:	4b25      	ldr	r3, [pc, #148]	@ (8001a3c <HAL_RCC_OscConfig+0x618>)
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	4924      	ldr	r1, [pc, #144]	@ (8001a3c <HAL_RCC_OscConfig+0x618>)
 80019ac:	4b25      	ldr	r3, [pc, #148]	@ (8001a44 <HAL_RCC_OscConfig+0x620>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	60cb      	str	r3, [r1, #12]
 80019b2:	e03e      	b.n	8001a32 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e039      	b.n	8001a34 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80019c0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a3c <HAL_RCC_OscConfig+0x618>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f003 0203 	and.w	r2, r3, #3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d12c      	bne.n	8001a2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019de:	3b01      	subs	r3, #1
 80019e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d123      	bne.n	8001a2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d11b      	bne.n	8001a2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a00:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d113      	bne.n	8001a2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a10:	085b      	lsrs	r3, r3, #1
 8001a12:	3b01      	subs	r3, #1
 8001a14:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d109      	bne.n	8001a2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a24:	085b      	lsrs	r3, r3, #1
 8001a26:	3b01      	subs	r3, #1
 8001a28:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3720      	adds	r7, #32
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	019f800c 	.word	0x019f800c
 8001a44:	feeefffc 	.word	0xfeeefffc

08001a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e11e      	b.n	8001c9e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a60:	4b91      	ldr	r3, [pc, #580]	@ (8001ca8 <HAL_RCC_ClockConfig+0x260>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 030f 	and.w	r3, r3, #15
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d910      	bls.n	8001a90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6e:	4b8e      	ldr	r3, [pc, #568]	@ (8001ca8 <HAL_RCC_ClockConfig+0x260>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 020f 	bic.w	r2, r3, #15
 8001a76:	498c      	ldr	r1, [pc, #560]	@ (8001ca8 <HAL_RCC_ClockConfig+0x260>)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7e:	4b8a      	ldr	r3, [pc, #552]	@ (8001ca8 <HAL_RCC_ClockConfig+0x260>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e106      	b.n	8001c9e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d073      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b03      	cmp	r3, #3
 8001aa2:	d129      	bne.n	8001af8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa4:	4b81      	ldr	r3, [pc, #516]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0f4      	b.n	8001c9e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001ab4:	f000 f99e 	bl	8001df4 <RCC_GetSysClockFreqFromPLLSource>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4a7c      	ldr	r2, [pc, #496]	@ (8001cb0 <HAL_RCC_ClockConfig+0x268>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d93f      	bls.n	8001b42 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ac2:	4b7a      	ldr	r3, [pc, #488]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d009      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d033      	beq.n	8001b42 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d12f      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ae2:	4b72      	ldr	r3, [pc, #456]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001aea:	4a70      	ldr	r2, [pc, #448]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001af0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001af2:	2380      	movs	r3, #128	@ 0x80
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	e024      	b.n	8001b42 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d107      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b00:	4b6a      	ldr	r3, [pc, #424]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d109      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0c6      	b.n	8001c9e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b10:	4b66      	ldr	r3, [pc, #408]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0be      	b.n	8001c9e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b20:	f000 f8ce 	bl	8001cc0 <HAL_RCC_GetSysClockFreq>
 8001b24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4a61      	ldr	r2, [pc, #388]	@ (8001cb0 <HAL_RCC_ClockConfig+0x268>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d909      	bls.n	8001b42 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b2e:	4b5f      	ldr	r3, [pc, #380]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b36:	4a5d      	ldr	r2, [pc, #372]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b3c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b3e:	2380      	movs	r3, #128	@ 0x80
 8001b40:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b42:	4b5a      	ldr	r3, [pc, #360]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f023 0203 	bic.w	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	4957      	ldr	r1, [pc, #348]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b54:	f7ff f848 	bl	8000be8 <HAL_GetTick>
 8001b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	e00a      	b.n	8001b72 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5c:	f7ff f844 	bl	8000be8 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e095      	b.n	8001c9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	4b4e      	ldr	r3, [pc, #312]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 020c 	and.w	r2, r3, #12
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d1eb      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d023      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b9c:	4b43      	ldr	r3, [pc, #268]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4a42      	ldr	r2, [pc, #264]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001ba2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ba6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d007      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001bb4:	4b3d      	ldr	r3, [pc, #244]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001bbc:	4a3b      	ldr	r2, [pc, #236]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001bbe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc4:	4b39      	ldr	r3, [pc, #228]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4936      	ldr	r1, [pc, #216]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2b80      	cmp	r3, #128	@ 0x80
 8001bdc:	d105      	bne.n	8001bea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bde:	4b33      	ldr	r3, [pc, #204]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	4a32      	ldr	r2, [pc, #200]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001be4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001be8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bea:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca8 <HAL_RCC_ClockConfig+0x260>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d21d      	bcs.n	8001c34 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca8 <HAL_RCC_ClockConfig+0x260>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 020f 	bic.w	r2, r3, #15
 8001c00:	4929      	ldr	r1, [pc, #164]	@ (8001ca8 <HAL_RCC_ClockConfig+0x260>)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c08:	f7fe ffee 	bl	8000be8 <HAL_GetTick>
 8001c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0e:	e00a      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c10:	f7fe ffea 	bl	8000be8 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e03b      	b.n	8001c9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b20      	ldr	r3, [pc, #128]	@ (8001ca8 <HAL_RCC_ClockConfig+0x260>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d1ed      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d008      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c40:	4b1a      	ldr	r3, [pc, #104]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4917      	ldr	r1, [pc, #92]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d009      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c5e:	4b13      	ldr	r3, [pc, #76]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	490f      	ldr	r1, [pc, #60]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c72:	f000 f825 	bl	8001cc0 <HAL_RCC_GetSysClockFreq>
 8001c76:	4602      	mov	r2, r0
 8001c78:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <HAL_RCC_ClockConfig+0x264>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	490c      	ldr	r1, [pc, #48]	@ (8001cb4 <HAL_RCC_ClockConfig+0x26c>)
 8001c84:	5ccb      	ldrb	r3, [r1, r3]
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb8 <HAL_RCC_ClockConfig+0x270>)
 8001c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c92:	4b0a      	ldr	r3, [pc, #40]	@ (8001cbc <HAL_RCC_ClockConfig+0x274>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe ff5a 	bl	8000b50 <HAL_InitTick>
 8001c9c:	4603      	mov	r3, r0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40022000 	.word	0x40022000
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	04c4b400 	.word	0x04c4b400
 8001cb4:	0800297c 	.word	0x0800297c
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	20000018 	.word	0x20000018

08001cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cc6:	4b2c      	ldr	r3, [pc, #176]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 030c 	and.w	r3, r3, #12
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d102      	bne.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	e047      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001cd8:	4b27      	ldr	r3, [pc, #156]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 030c 	and.w	r3, r3, #12
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d102      	bne.n	8001cea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ce4:	4b26      	ldr	r3, [pc, #152]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	e03e      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001cea:	4b23      	ldr	r3, [pc, #140]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	2b0c      	cmp	r3, #12
 8001cf4:	d136      	bne.n	8001d64 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cf6:	4b20      	ldr	r3, [pc, #128]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d00:	4b1d      	ldr	r3, [pc, #116]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d10c      	bne.n	8001d2e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d14:	4a1a      	ldr	r2, [pc, #104]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1c:	4a16      	ldr	r2, [pc, #88]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d1e:	68d2      	ldr	r2, [r2, #12]
 8001d20:	0a12      	lsrs	r2, r2, #8
 8001d22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
 8001d2a:	617b      	str	r3, [r7, #20]
      break;
 8001d2c:	e00c      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d2e:	4a13      	ldr	r2, [pc, #76]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d36:	4a10      	ldr	r2, [pc, #64]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d38:	68d2      	ldr	r2, [r2, #12]
 8001d3a:	0a12      	lsrs	r2, r2, #8
 8001d3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d40:	fb02 f303 	mul.w	r3, r2, r3
 8001d44:	617b      	str	r3, [r7, #20]
      break;
 8001d46:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d48:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	0e5b      	lsrs	r3, r3, #25
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	3301      	adds	r3, #1
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	e001      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d68:	693b      	ldr	r3, [r7, #16]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	371c      	adds	r7, #28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	00f42400 	.word	0x00f42400
 8001d80:	016e3600 	.word	0x016e3600

08001d84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d88:	4b03      	ldr	r3, [pc, #12]	@ (8001d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000000 	.word	0x20000000

08001d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001da0:	f7ff fff0 	bl	8001d84 <HAL_RCC_GetHCLKFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	0a1b      	lsrs	r3, r3, #8
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	4904      	ldr	r1, [pc, #16]	@ (8001dc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	0800298c 	.word	0x0800298c

08001dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dcc:	f7ff ffda 	bl	8001d84 <HAL_RCC_GetHCLKFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	0adb      	lsrs	r3, r3, #11
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	4904      	ldr	r1, [pc, #16]	@ (8001df0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000
 8001df0:	0800298c 	.word	0x0800298c

08001df4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	@ (8001e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	3301      	adds	r3, #1
 8001e10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	d10c      	bne.n	8001e32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e18:	4a17      	ldr	r2, [pc, #92]	@ (8001e78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e20:	4a14      	ldr	r2, [pc, #80]	@ (8001e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e22:	68d2      	ldr	r2, [r2, #12]
 8001e24:	0a12      	lsrs	r2, r2, #8
 8001e26:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	617b      	str	r3, [r7, #20]
    break;
 8001e30:	e00c      	b.n	8001e4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e32:	4a12      	ldr	r2, [pc, #72]	@ (8001e7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e3c:	68d2      	ldr	r2, [r2, #12]
 8001e3e:	0a12      	lsrs	r2, r2, #8
 8001e40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e44:	fb02 f303 	mul.w	r3, r2, r3
 8001e48:	617b      	str	r3, [r7, #20]
    break;
 8001e4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e4c:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	0e5b      	lsrs	r3, r3, #25
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	3301      	adds	r3, #1
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e66:	687b      	ldr	r3, [r7, #4]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	371c      	adds	r7, #28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	40021000 	.word	0x40021000
 8001e78:	016e3600 	.word	0x016e3600
 8001e7c:	00f42400 	.word	0x00f42400

08001e80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e042      	b.n	8001f18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d106      	bne.n	8001eaa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f83b 	bl	8001f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2224      	movs	r2, #36	@ 0x24
 8001eae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0201 	bic.w	r2, r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fafe 	bl	80024cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f82f 	bl	8001f34 <UART_SetConfig>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e01b      	b.n	8001f18 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001eee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001efe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 fb7d 	bl	8002610 <UART_CheckIdleState>
 8001f16:	4603      	mov	r3, r0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f38:	b08c      	sub	sp, #48	@ 0x30
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	431a      	orrs	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4bab      	ldr	r3, [pc, #684]	@ (8002210 <UART_SetConfig+0x2dc>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4aa0      	ldr	r2, [pc, #640]	@ (8002214 <UART_SetConfig+0x2e0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d004      	beq.n	8001fa0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8001faa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fbe:	f023 010f 	bic.w	r1, r3, #15
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a91      	ldr	r2, [pc, #580]	@ (8002218 <UART_SetConfig+0x2e4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d125      	bne.n	8002024 <UART_SetConfig+0xf0>
 8001fd8:	4b90      	ldr	r3, [pc, #576]	@ (800221c <UART_SetConfig+0x2e8>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d81a      	bhi.n	800201c <UART_SetConfig+0xe8>
 8001fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8001fec <UART_SetConfig+0xb8>)
 8001fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fec:	08001ffd 	.word	0x08001ffd
 8001ff0:	0800200d 	.word	0x0800200d
 8001ff4:	08002005 	.word	0x08002005
 8001ff8:	08002015 	.word	0x08002015
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002002:	e0d6      	b.n	80021b2 <UART_SetConfig+0x27e>
 8002004:	2302      	movs	r3, #2
 8002006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800200a:	e0d2      	b.n	80021b2 <UART_SetConfig+0x27e>
 800200c:	2304      	movs	r3, #4
 800200e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002012:	e0ce      	b.n	80021b2 <UART_SetConfig+0x27e>
 8002014:	2308      	movs	r3, #8
 8002016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800201a:	e0ca      	b.n	80021b2 <UART_SetConfig+0x27e>
 800201c:	2310      	movs	r3, #16
 800201e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002022:	e0c6      	b.n	80021b2 <UART_SetConfig+0x27e>
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a7d      	ldr	r2, [pc, #500]	@ (8002220 <UART_SetConfig+0x2ec>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d138      	bne.n	80020a0 <UART_SetConfig+0x16c>
 800202e:	4b7b      	ldr	r3, [pc, #492]	@ (800221c <UART_SetConfig+0x2e8>)
 8002030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b0c      	cmp	r3, #12
 800203a:	d82d      	bhi.n	8002098 <UART_SetConfig+0x164>
 800203c:	a201      	add	r2, pc, #4	@ (adr r2, 8002044 <UART_SetConfig+0x110>)
 800203e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002042:	bf00      	nop
 8002044:	08002079 	.word	0x08002079
 8002048:	08002099 	.word	0x08002099
 800204c:	08002099 	.word	0x08002099
 8002050:	08002099 	.word	0x08002099
 8002054:	08002089 	.word	0x08002089
 8002058:	08002099 	.word	0x08002099
 800205c:	08002099 	.word	0x08002099
 8002060:	08002099 	.word	0x08002099
 8002064:	08002081 	.word	0x08002081
 8002068:	08002099 	.word	0x08002099
 800206c:	08002099 	.word	0x08002099
 8002070:	08002099 	.word	0x08002099
 8002074:	08002091 	.word	0x08002091
 8002078:	2300      	movs	r3, #0
 800207a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800207e:	e098      	b.n	80021b2 <UART_SetConfig+0x27e>
 8002080:	2302      	movs	r3, #2
 8002082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002086:	e094      	b.n	80021b2 <UART_SetConfig+0x27e>
 8002088:	2304      	movs	r3, #4
 800208a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800208e:	e090      	b.n	80021b2 <UART_SetConfig+0x27e>
 8002090:	2308      	movs	r3, #8
 8002092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002096:	e08c      	b.n	80021b2 <UART_SetConfig+0x27e>
 8002098:	2310      	movs	r3, #16
 800209a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800209e:	e088      	b.n	80021b2 <UART_SetConfig+0x27e>
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a5f      	ldr	r2, [pc, #380]	@ (8002224 <UART_SetConfig+0x2f0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d125      	bne.n	80020f6 <UART_SetConfig+0x1c2>
 80020aa:	4b5c      	ldr	r3, [pc, #368]	@ (800221c <UART_SetConfig+0x2e8>)
 80020ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80020b4:	2b30      	cmp	r3, #48	@ 0x30
 80020b6:	d016      	beq.n	80020e6 <UART_SetConfig+0x1b2>
 80020b8:	2b30      	cmp	r3, #48	@ 0x30
 80020ba:	d818      	bhi.n	80020ee <UART_SetConfig+0x1ba>
 80020bc:	2b20      	cmp	r3, #32
 80020be:	d00a      	beq.n	80020d6 <UART_SetConfig+0x1a2>
 80020c0:	2b20      	cmp	r3, #32
 80020c2:	d814      	bhi.n	80020ee <UART_SetConfig+0x1ba>
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <UART_SetConfig+0x19a>
 80020c8:	2b10      	cmp	r3, #16
 80020ca:	d008      	beq.n	80020de <UART_SetConfig+0x1aa>
 80020cc:	e00f      	b.n	80020ee <UART_SetConfig+0x1ba>
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020d4:	e06d      	b.n	80021b2 <UART_SetConfig+0x27e>
 80020d6:	2302      	movs	r3, #2
 80020d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020dc:	e069      	b.n	80021b2 <UART_SetConfig+0x27e>
 80020de:	2304      	movs	r3, #4
 80020e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020e4:	e065      	b.n	80021b2 <UART_SetConfig+0x27e>
 80020e6:	2308      	movs	r3, #8
 80020e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020ec:	e061      	b.n	80021b2 <UART_SetConfig+0x27e>
 80020ee:	2310      	movs	r3, #16
 80020f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020f4:	e05d      	b.n	80021b2 <UART_SetConfig+0x27e>
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a4b      	ldr	r2, [pc, #300]	@ (8002228 <UART_SetConfig+0x2f4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d125      	bne.n	800214c <UART_SetConfig+0x218>
 8002100:	4b46      	ldr	r3, [pc, #280]	@ (800221c <UART_SetConfig+0x2e8>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002106:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800210a:	2bc0      	cmp	r3, #192	@ 0xc0
 800210c:	d016      	beq.n	800213c <UART_SetConfig+0x208>
 800210e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002110:	d818      	bhi.n	8002144 <UART_SetConfig+0x210>
 8002112:	2b80      	cmp	r3, #128	@ 0x80
 8002114:	d00a      	beq.n	800212c <UART_SetConfig+0x1f8>
 8002116:	2b80      	cmp	r3, #128	@ 0x80
 8002118:	d814      	bhi.n	8002144 <UART_SetConfig+0x210>
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <UART_SetConfig+0x1f0>
 800211e:	2b40      	cmp	r3, #64	@ 0x40
 8002120:	d008      	beq.n	8002134 <UART_SetConfig+0x200>
 8002122:	e00f      	b.n	8002144 <UART_SetConfig+0x210>
 8002124:	2300      	movs	r3, #0
 8002126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800212a:	e042      	b.n	80021b2 <UART_SetConfig+0x27e>
 800212c:	2302      	movs	r3, #2
 800212e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002132:	e03e      	b.n	80021b2 <UART_SetConfig+0x27e>
 8002134:	2304      	movs	r3, #4
 8002136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800213a:	e03a      	b.n	80021b2 <UART_SetConfig+0x27e>
 800213c:	2308      	movs	r3, #8
 800213e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002142:	e036      	b.n	80021b2 <UART_SetConfig+0x27e>
 8002144:	2310      	movs	r3, #16
 8002146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800214a:	e032      	b.n	80021b2 <UART_SetConfig+0x27e>
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a30      	ldr	r2, [pc, #192]	@ (8002214 <UART_SetConfig+0x2e0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d12a      	bne.n	80021ac <UART_SetConfig+0x278>
 8002156:	4b31      	ldr	r3, [pc, #196]	@ (800221c <UART_SetConfig+0x2e8>)
 8002158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002160:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002164:	d01a      	beq.n	800219c <UART_SetConfig+0x268>
 8002166:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800216a:	d81b      	bhi.n	80021a4 <UART_SetConfig+0x270>
 800216c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002170:	d00c      	beq.n	800218c <UART_SetConfig+0x258>
 8002172:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002176:	d815      	bhi.n	80021a4 <UART_SetConfig+0x270>
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <UART_SetConfig+0x250>
 800217c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002180:	d008      	beq.n	8002194 <UART_SetConfig+0x260>
 8002182:	e00f      	b.n	80021a4 <UART_SetConfig+0x270>
 8002184:	2300      	movs	r3, #0
 8002186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800218a:	e012      	b.n	80021b2 <UART_SetConfig+0x27e>
 800218c:	2302      	movs	r3, #2
 800218e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002192:	e00e      	b.n	80021b2 <UART_SetConfig+0x27e>
 8002194:	2304      	movs	r3, #4
 8002196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800219a:	e00a      	b.n	80021b2 <UART_SetConfig+0x27e>
 800219c:	2308      	movs	r3, #8
 800219e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80021a2:	e006      	b.n	80021b2 <UART_SetConfig+0x27e>
 80021a4:	2310      	movs	r3, #16
 80021a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80021aa:	e002      	b.n	80021b2 <UART_SetConfig+0x27e>
 80021ac:	2310      	movs	r3, #16
 80021ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a17      	ldr	r2, [pc, #92]	@ (8002214 <UART_SetConfig+0x2e0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	f040 80a8 	bne.w	800230e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80021be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d834      	bhi.n	8002230 <UART_SetConfig+0x2fc>
 80021c6:	a201      	add	r2, pc, #4	@ (adr r2, 80021cc <UART_SetConfig+0x298>)
 80021c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021cc:	080021f1 	.word	0x080021f1
 80021d0:	08002231 	.word	0x08002231
 80021d4:	080021f9 	.word	0x080021f9
 80021d8:	08002231 	.word	0x08002231
 80021dc:	080021ff 	.word	0x080021ff
 80021e0:	08002231 	.word	0x08002231
 80021e4:	08002231 	.word	0x08002231
 80021e8:	08002231 	.word	0x08002231
 80021ec:	08002207 	.word	0x08002207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021f0:	f7ff fdd4 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 80021f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80021f6:	e021      	b.n	800223c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80021f8:	4b0c      	ldr	r3, [pc, #48]	@ (800222c <UART_SetConfig+0x2f8>)
 80021fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80021fc:	e01e      	b.n	800223c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021fe:	f7ff fd5f 	bl	8001cc0 <HAL_RCC_GetSysClockFreq>
 8002202:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002204:	e01a      	b.n	800223c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800220a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800220c:	e016      	b.n	800223c <UART_SetConfig+0x308>
 800220e:	bf00      	nop
 8002210:	cfff69f3 	.word	0xcfff69f3
 8002214:	40008000 	.word	0x40008000
 8002218:	40013800 	.word	0x40013800
 800221c:	40021000 	.word	0x40021000
 8002220:	40004400 	.word	0x40004400
 8002224:	40004800 	.word	0x40004800
 8002228:	40004c00 	.word	0x40004c00
 800222c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800223a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800223c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 812a 	beq.w	8002498 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002248:	4a9e      	ldr	r2, [pc, #632]	@ (80024c4 <UART_SetConfig+0x590>)
 800224a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800224e:	461a      	mov	r2, r3
 8002250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002252:	fbb3 f3f2 	udiv	r3, r3, r2
 8002256:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	429a      	cmp	r2, r3
 8002266:	d305      	bcc.n	8002274 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	429a      	cmp	r2, r3
 8002272:	d903      	bls.n	800227c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800227a:	e10d      	b.n	8002498 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800227c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227e:	2200      	movs	r2, #0
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	60fa      	str	r2, [r7, #12]
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002288:	4a8e      	ldr	r2, [pc, #568]	@ (80024c4 <UART_SetConfig+0x590>)
 800228a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800228e:	b29b      	uxth	r3, r3
 8002290:	2200      	movs	r2, #0
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	e9d7 2300 	ldrd	r2, r3, [r7]
 800229a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800229e:	f7fd ffbb 	bl	8000218 <__aeabi_uldivmod>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	020b      	lsls	r3, r1, #8
 80022b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80022b8:	0202      	lsls	r2, r0, #8
 80022ba:	6979      	ldr	r1, [r7, #20]
 80022bc:	6849      	ldr	r1, [r1, #4]
 80022be:	0849      	lsrs	r1, r1, #1
 80022c0:	2000      	movs	r0, #0
 80022c2:	460c      	mov	r4, r1
 80022c4:	4605      	mov	r5, r0
 80022c6:	eb12 0804 	adds.w	r8, r2, r4
 80022ca:	eb43 0905 	adc.w	r9, r3, r5
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	469a      	mov	sl, r3
 80022d6:	4693      	mov	fp, r2
 80022d8:	4652      	mov	r2, sl
 80022da:	465b      	mov	r3, fp
 80022dc:	4640      	mov	r0, r8
 80022de:	4649      	mov	r1, r9
 80022e0:	f7fd ff9a 	bl	8000218 <__aeabi_uldivmod>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4613      	mov	r3, r2
 80022ea:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80022f2:	d308      	bcc.n	8002306 <UART_SetConfig+0x3d2>
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80022fa:	d204      	bcs.n	8002306 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6a3a      	ldr	r2, [r7, #32]
 8002302:	60da      	str	r2, [r3, #12]
 8002304:	e0c8      	b.n	8002498 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800230c:	e0c4      	b.n	8002498 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002316:	d167      	bne.n	80023e8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002318:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800231c:	2b08      	cmp	r3, #8
 800231e:	d828      	bhi.n	8002372 <UART_SetConfig+0x43e>
 8002320:	a201      	add	r2, pc, #4	@ (adr r2, 8002328 <UART_SetConfig+0x3f4>)
 8002322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002326:	bf00      	nop
 8002328:	0800234d 	.word	0x0800234d
 800232c:	08002355 	.word	0x08002355
 8002330:	0800235d 	.word	0x0800235d
 8002334:	08002373 	.word	0x08002373
 8002338:	08002363 	.word	0x08002363
 800233c:	08002373 	.word	0x08002373
 8002340:	08002373 	.word	0x08002373
 8002344:	08002373 	.word	0x08002373
 8002348:	0800236b 	.word	0x0800236b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800234c:	f7ff fd26 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 8002350:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002352:	e014      	b.n	800237e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002354:	f7ff fd38 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 8002358:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800235a:	e010      	b.n	800237e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800235c:	4b5a      	ldr	r3, [pc, #360]	@ (80024c8 <UART_SetConfig+0x594>)
 800235e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002360:	e00d      	b.n	800237e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002362:	f7ff fcad 	bl	8001cc0 <HAL_RCC_GetSysClockFreq>
 8002366:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002368:	e009      	b.n	800237e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800236a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800236e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002370:	e005      	b.n	800237e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800237c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 8089 	beq.w	8002498 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	4a4e      	ldr	r2, [pc, #312]	@ (80024c4 <UART_SetConfig+0x590>)
 800238c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002390:	461a      	mov	r2, r3
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	fbb3 f3f2 	udiv	r3, r3, r2
 8002398:	005a      	lsls	r2, r3, #1
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	085b      	lsrs	r3, r3, #1
 80023a0:	441a      	add	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	2b0f      	cmp	r3, #15
 80023b0:	d916      	bls.n	80023e0 <UART_SetConfig+0x4ac>
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023b8:	d212      	bcs.n	80023e0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	f023 030f 	bic.w	r3, r3, #15
 80023c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	085b      	lsrs	r3, r3, #1
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	8bfb      	ldrh	r3, [r7, #30]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	8bfa      	ldrh	r2, [r7, #30]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	e05b      	b.n	8002498 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80023e6:	e057      	b.n	8002498 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80023e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d828      	bhi.n	8002442 <UART_SetConfig+0x50e>
 80023f0:	a201      	add	r2, pc, #4	@ (adr r2, 80023f8 <UART_SetConfig+0x4c4>)
 80023f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f6:	bf00      	nop
 80023f8:	0800241d 	.word	0x0800241d
 80023fc:	08002425 	.word	0x08002425
 8002400:	0800242d 	.word	0x0800242d
 8002404:	08002443 	.word	0x08002443
 8002408:	08002433 	.word	0x08002433
 800240c:	08002443 	.word	0x08002443
 8002410:	08002443 	.word	0x08002443
 8002414:	08002443 	.word	0x08002443
 8002418:	0800243b 	.word	0x0800243b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800241c:	f7ff fcbe 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 8002420:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002422:	e014      	b.n	800244e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002424:	f7ff fcd0 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 8002428:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800242a:	e010      	b.n	800244e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800242c:	4b26      	ldr	r3, [pc, #152]	@ (80024c8 <UART_SetConfig+0x594>)
 800242e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002430:	e00d      	b.n	800244e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002432:	f7ff fc45 	bl	8001cc0 <HAL_RCC_GetSysClockFreq>
 8002436:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002438:	e009      	b.n	800244e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800243a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002440:	e005      	b.n	800244e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800244c:	bf00      	nop
    }

    if (pclk != 0U)
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	2b00      	cmp	r3, #0
 8002452:	d021      	beq.n	8002498 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002458:	4a1a      	ldr	r2, [pc, #104]	@ (80024c4 <UART_SetConfig+0x590>)
 800245a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800245e:	461a      	mov	r2, r3
 8002460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002462:	fbb3 f2f2 	udiv	r2, r3, r2
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	085b      	lsrs	r3, r3, #1
 800246c:	441a      	add	r2, r3
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	fbb2 f3f3 	udiv	r3, r2, r3
 8002476:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	2b0f      	cmp	r3, #15
 800247c:	d909      	bls.n	8002492 <UART_SetConfig+0x55e>
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002484:	d205      	bcs.n	8002492 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	b29a      	uxth	r2, r3
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60da      	str	r2, [r3, #12]
 8002490:	e002      	b.n	8002498 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	2201      	movs	r2, #1
 800249c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2200      	movs	r2, #0
 80024ac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2200      	movs	r2, #0
 80024b2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80024b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3730      	adds	r7, #48	@ 0x30
 80024bc:	46bd      	mov	sp, r7
 80024be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024c2:	bf00      	nop
 80024c4:	08002998 	.word	0x08002998
 80024c8:	00f42400 	.word	0x00f42400

080024cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00a      	beq.n	8002518 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00a      	beq.n	80025a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01a      	beq.n	80025e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025ca:	d10a      	bne.n	80025e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	605a      	str	r2, [r3, #4]
  }
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b098      	sub	sp, #96	@ 0x60
 8002614:	af02      	add	r7, sp, #8
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002620:	f7fe fae2 	bl	8000be8 <HAL_GetTick>
 8002624:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b08      	cmp	r3, #8
 8002632:	d12f      	bne.n	8002694 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002634:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800263c:	2200      	movs	r2, #0
 800263e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f88e 	bl	8002764 <UART_WaitOnFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d022      	beq.n	8002694 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002656:	e853 3f00 	ldrex	r3, [r3]
 800265a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800265c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800265e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002662:	653b      	str	r3, [r7, #80]	@ 0x50
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800266c:	647b      	str	r3, [r7, #68]	@ 0x44
 800266e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002670:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002672:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002674:	e841 2300 	strex	r3, r2, [r1]
 8002678:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800267a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e6      	bne.n	800264e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2220      	movs	r2, #32
 8002684:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e063      	b.n	800275c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d149      	bne.n	8002736 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026aa:	2200      	movs	r2, #0
 80026ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f857 	bl	8002764 <UART_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d03c      	beq.n	8002736 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	e853 3f00 	ldrex	r3, [r3]
 80026c8:	623b      	str	r3, [r7, #32]
   return(result);
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80026d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026da:	633b      	str	r3, [r7, #48]	@ 0x30
 80026dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80026e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026e2:	e841 2300 	strex	r3, r2, [r1]
 80026e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80026e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1e6      	bne.n	80026bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	3308      	adds	r3, #8
 80026f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	e853 3f00 	ldrex	r3, [r3]
 80026fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3308      	adds	r3, #8
 800270c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800270e:	61fa      	str	r2, [r7, #28]
 8002710:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002712:	69b9      	ldr	r1, [r7, #24]
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	e841 2300 	strex	r3, r2, [r1]
 800271a:	617b      	str	r3, [r7, #20]
   return(result);
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1e5      	bne.n	80026ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2220      	movs	r2, #32
 8002726:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e012      	b.n	800275c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2220      	movs	r2, #32
 800273a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2220      	movs	r2, #32
 8002742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3758      	adds	r7, #88	@ 0x58
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	4613      	mov	r3, r2
 8002772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002774:	e04f      	b.n	8002816 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800277c:	d04b      	beq.n	8002816 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277e:	f7fe fa33 	bl	8000be8 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	429a      	cmp	r2, r3
 800278c:	d302      	bcc.n	8002794 <UART_WaitOnFlagUntilTimeout+0x30>
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e04e      	b.n	8002836 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d037      	beq.n	8002816 <UART_WaitOnFlagUntilTimeout+0xb2>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b80      	cmp	r3, #128	@ 0x80
 80027aa:	d034      	beq.n	8002816 <UART_WaitOnFlagUntilTimeout+0xb2>
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b40      	cmp	r3, #64	@ 0x40
 80027b0:	d031      	beq.n	8002816 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d110      	bne.n	80027e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2208      	movs	r2, #8
 80027c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 f838 	bl	800283e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2208      	movs	r2, #8
 80027d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e029      	b.n	8002836 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027f0:	d111      	bne.n	8002816 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f81e 	bl	800283e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e00f      	b.n	8002836 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	69da      	ldr	r2, [r3, #28]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4013      	ands	r3, r2
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	429a      	cmp	r2, r3
 8002824:	bf0c      	ite	eq
 8002826:	2301      	moveq	r3, #1
 8002828:	2300      	movne	r3, #0
 800282a:	b2db      	uxtb	r3, r3
 800282c:	461a      	mov	r2, r3
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	429a      	cmp	r2, r3
 8002832:	d0a0      	beq.n	8002776 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800283e:	b480      	push	{r7}
 8002840:	b095      	sub	sp, #84	@ 0x54
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800284e:	e853 3f00 	ldrex	r3, [r3]
 8002852:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002856:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800285a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002864:	643b      	str	r3, [r7, #64]	@ 0x40
 8002866:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002868:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800286a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800286c:	e841 2300 	strex	r3, r2, [r1]
 8002870:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1e6      	bne.n	8002846 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	3308      	adds	r3, #8
 800287e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	e853 3f00 	ldrex	r3, [r3]
 8002886:	61fb      	str	r3, [r7, #28]
   return(result);
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800288e:	f023 0301 	bic.w	r3, r3, #1
 8002892:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3308      	adds	r3, #8
 800289a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800289c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800289e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028a4:	e841 2300 	strex	r3, r2, [r1]
 80028a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1e3      	bne.n	8002878 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d118      	bne.n	80028ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	e853 3f00 	ldrex	r3, [r3]
 80028c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f023 0310 	bic.w	r3, r3, #16
 80028cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028d6:	61bb      	str	r3, [r7, #24]
 80028d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028da:	6979      	ldr	r1, [r7, #20]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	e841 2300 	strex	r3, r2, [r1]
 80028e2:	613b      	str	r3, [r7, #16]
   return(result);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1e6      	bne.n	80028b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2220      	movs	r2, #32
 80028ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80028fe:	bf00      	nop
 8002900:	3754      	adds	r7, #84	@ 0x54
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <memset>:
 800290a:	4402      	add	r2, r0
 800290c:	4603      	mov	r3, r0
 800290e:	4293      	cmp	r3, r2
 8002910:	d100      	bne.n	8002914 <memset+0xa>
 8002912:	4770      	bx	lr
 8002914:	f803 1b01 	strb.w	r1, [r3], #1
 8002918:	e7f9      	b.n	800290e <memset+0x4>
	...

0800291c <__libc_init_array>:
 800291c:	b570      	push	{r4, r5, r6, lr}
 800291e:	4d0d      	ldr	r5, [pc, #52]	@ (8002954 <__libc_init_array+0x38>)
 8002920:	4c0d      	ldr	r4, [pc, #52]	@ (8002958 <__libc_init_array+0x3c>)
 8002922:	1b64      	subs	r4, r4, r5
 8002924:	10a4      	asrs	r4, r4, #2
 8002926:	2600      	movs	r6, #0
 8002928:	42a6      	cmp	r6, r4
 800292a:	d109      	bne.n	8002940 <__libc_init_array+0x24>
 800292c:	4d0b      	ldr	r5, [pc, #44]	@ (800295c <__libc_init_array+0x40>)
 800292e:	4c0c      	ldr	r4, [pc, #48]	@ (8002960 <__libc_init_array+0x44>)
 8002930:	f000 f818 	bl	8002964 <_init>
 8002934:	1b64      	subs	r4, r4, r5
 8002936:	10a4      	asrs	r4, r4, #2
 8002938:	2600      	movs	r6, #0
 800293a:	42a6      	cmp	r6, r4
 800293c:	d105      	bne.n	800294a <__libc_init_array+0x2e>
 800293e:	bd70      	pop	{r4, r5, r6, pc}
 8002940:	f855 3b04 	ldr.w	r3, [r5], #4
 8002944:	4798      	blx	r3
 8002946:	3601      	adds	r6, #1
 8002948:	e7ee      	b.n	8002928 <__libc_init_array+0xc>
 800294a:	f855 3b04 	ldr.w	r3, [r5], #4
 800294e:	4798      	blx	r3
 8002950:	3601      	adds	r6, #1
 8002952:	e7f2      	b.n	800293a <__libc_init_array+0x1e>
 8002954:	080029b8 	.word	0x080029b8
 8002958:	080029b8 	.word	0x080029b8
 800295c:	080029b8 	.word	0x080029b8
 8002960:	080029bc 	.word	0x080029bc

08002964 <_init>:
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	bf00      	nop
 8002968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296a:	bc08      	pop	{r3}
 800296c:	469e      	mov	lr, r3
 800296e:	4770      	bx	lr

08002970 <_fini>:
 8002970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002972:	bf00      	nop
 8002974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002976:	bc08      	pop	{r3}
 8002978:	469e      	mov	lr, r3
 800297a:	4770      	bx	lr
